// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: info.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoomId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *RoomId) Reset() {
	*x = RoomId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomId) ProtoMessage() {}

func (x *RoomId) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomId.ProtoReflect.Descriptor instead.
func (*RoomId) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{0}
}

func (x *RoomId) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type Cmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// restart, upgrade, kick, call, js, cors, time, s4f_, ?fetch, store, args
	Cmd  string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Args string `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Cmd) Reset() {
	*x = Cmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cmd) ProtoMessage() {}

func (x *Cmd) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cmd.ProtoReflect.Descriptor instead.
func (*Cmd) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{1}
}

func (x *Cmd) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *Cmd) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Resp string `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *Resp) Reset() {
	*x = Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resp) ProtoMessage() {}

func (x *Resp) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resp.ProtoReflect.Descriptor instead.
func (*Resp) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{2}
}

func (x *Resp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Resp) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

type RespHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	History []string `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *RespHistory) Reset() {
	*x = RespHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespHistory) ProtoMessage() {}

func (x *RespHistory) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespHistory.ProtoReflect.Descriptor instead.
func (*RespHistory) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{3}
}

func (x *RespHistory) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RespHistory) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

type RespStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room          string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	OtherRoom     string `protobuf:"bytes,2,opt,name=other_room,json=otherRoom,proto3" json:"other_room,omitempty"`
	Pop           int32  `protobuf:"varint,3,opt,name=pop,proto3" json:"pop,omitempty"`
	Purse         int32  `protobuf:"varint,4,opt,name=purse,proto3" json:"purse,omitempty"`
	QueSize       int32  `protobuf:"varint,5,opt,name=que_size,json=queSize,proto3" json:"que_size,omitempty"`
	Status        int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	StatusContent string `protobuf:"bytes,7,opt,name=status_content,json=statusContent,proto3" json:"status_content,omitempty"`
}

func (x *RespStatus) Reset() {
	*x = RespStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespStatus) ProtoMessage() {}

func (x *RespStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespStatus.ProtoReflect.Descriptor instead.
func (*RespStatus) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{4}
}

func (x *RespStatus) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *RespStatus) GetOtherRoom() string {
	if x != nil {
		return x.OtherRoom
	}
	return ""
}

func (x *RespStatus) GetPop() int32 {
	if x != nil {
		return x.Pop
	}
	return 0
}

func (x *RespStatus) GetPurse() int32 {
	if x != nil {
		return x.Purse
	}
	return 0
}

func (x *RespStatus) GetQueSize() int32 {
	if x != nil {
		return x.QueSize
	}
	return 0
}

func (x *RespStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RespStatus) GetStatusContent() string {
	if x != nil {
		return x.StatusContent
	}
	return ""
}

type RespClients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*ClientInfo `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *RespClients) Reset() {
	*x = RespClients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespClients) ProtoMessage() {}

func (x *RespClients) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespClients.ProtoReflect.Descriptor instead.
func (*RespClients) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{5}
}

func (x *RespClients) GetClients() []*ClientInfo {
	if x != nil {
		return x.Clients
	}
	return nil
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ua       string   `protobuf:"bytes,7,opt,name=ua,proto3" json:"ua,omitempty"`
	First    string   `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Interval int32    `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Last     string   `protobuf:"bytes,3,opt,name=last,proto3" json:"last,omitempty"`
	Path     []string `protobuf:"bytes,4,rep,name=path,proto3" json:"path,omitempty"`
	Reads    int32    `protobuf:"varint,5,opt,name=reads,proto3" json:"reads,omitempty"`
	Kick     string   `protobuf:"bytes,6,opt,name=kick,proto3" json:"kick,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{6}
}

func (x *ClientInfo) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

func (x *ClientInfo) GetFirst() string {
	if x != nil {
		return x.First
	}
	return ""
}

func (x *ClientInfo) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ClientInfo) GetLast() string {
	if x != nil {
		return x.Last
	}
	return ""
}

func (x *ClientInfo) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ClientInfo) GetReads() int32 {
	if x != nil {
		return x.Reads
	}
	return 0
}

func (x *ClientInfo) GetKick() string {
	if x != nil {
		return x.Kick
	}
	return ""
}

type RespTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test string `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *RespTest) Reset() {
	*x = RespTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespTest) ProtoMessage() {}

func (x *RespTest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespTest.ProtoReflect.Descriptor instead.
func (*RespTest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{7}
}

func (x *RespTest) GetTest() string {
	if x != nil {
		return x.Test
	}
	return ""
}

type RespDanmu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Danmu []string `protobuf:"bytes,1,rep,name=danmu,proto3" json:"danmu,omitempty"`
}

func (x *RespDanmu) Reset() {
	*x = RespDanmu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespDanmu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespDanmu) ProtoMessage() {}

func (x *RespDanmu) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespDanmu.ProtoReflect.Descriptor instead.
func (*RespDanmu) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{8}
}

func (x *RespDanmu) GetDanmu() []string {
	if x != nil {
		return x.Danmu
	}
	return nil
}

var File_info_proto protoreflect.FileDescriptor

var file_info_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x06, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x03,
	0x43, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x2e, 0x0a, 0x04, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75,
	0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x63, 0x6b, 0x22, 0x1e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x6e, 0x6d, 0x75,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x32, 0xca, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x07, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x1a, 0x05, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x17, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x04, 0x2e, 0x43, 0x6d, 0x64, 0x1a, 0x05, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x54, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_proto_rawDescOnce sync.Once
	file_info_proto_rawDescData = file_info_proto_rawDesc
)

func file_info_proto_rawDescGZIP() []byte {
	file_info_proto_rawDescOnce.Do(func() {
		file_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_proto_rawDescData)
	})
	return file_info_proto_rawDescData
}

var file_info_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_info_proto_goTypes = []interface{}{
	(*RoomId)(nil),      // 0: RoomId
	(*Cmd)(nil),         // 1: Cmd
	(*Resp)(nil),        // 2: Resp
	(*RespHistory)(nil), // 3: RespHistory
	(*RespStatus)(nil),  // 4: RespStatus
	(*RespClients)(nil), // 5: RespClients
	(*ClientInfo)(nil),  // 6: ClientInfo
	(*RespTest)(nil),    // 7: RespTest
	(*RespDanmu)(nil),   // 8: RespDanmu
	(*empty.Empty)(nil), // 9: google.protobuf.Empty
}
var file_info_proto_depIdxs = []int32{
	6, // 0: RespClients.clients:type_name -> ClientInfo
	0, // 1: InfoService.ChangeRoom:input_type -> RoomId
	9, // 2: InfoService.GetHistory:input_type -> google.protobuf.Empty
	1, // 3: InfoService.GetCmd:input_type -> Cmd
	9, // 4: InfoService.GetStatus:input_type -> google.protobuf.Empty
	9, // 5: InfoService.GetClients:input_type -> google.protobuf.Empty
	9, // 6: InfoService.GetTest:input_type -> google.protobuf.Empty
	9, // 7: InfoService.GetDanmu:input_type -> google.protobuf.Empty
	2, // 8: InfoService.ChangeRoom:output_type -> Resp
	3, // 9: InfoService.GetHistory:output_type -> RespHistory
	2, // 10: InfoService.GetCmd:output_type -> Resp
	4, // 11: InfoService.GetStatus:output_type -> RespStatus
	5, // 12: InfoService.GetClients:output_type -> RespClients
	7, // 13: InfoService.GetTest:output_type -> RespTest
	8, // 14: InfoService.GetDanmu:output_type -> RespDanmu
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_info_proto_init() }
func file_info_proto_init() {
	if File_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespClients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespDanmu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_info_proto_goTypes,
		DependencyIndexes: file_info_proto_depIdxs,
		MessageInfos:      file_info_proto_msgTypes,
	}.Build()
	File_info_proto = out.File
	file_info_proto_rawDesc = nil
	file_info_proto_goTypes = nil
	file_info_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfoServiceClient is the client API for InfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoServiceClient interface {
	ChangeRoom(ctx context.Context, in *RoomId, opts ...grpc.CallOption) (*Resp, error)
	GetHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespHistory, error)
	GetCmd(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*Resp, error)
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespStatus, error)
	GetClients(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespClients, error)
	GetTest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespTest, error)
	GetDanmu(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InfoService_GetDanmuClient, error)
}

type infoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoServiceClient(cc grpc.ClientConnInterface) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) ChangeRoom(ctx context.Context, in *RoomId, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/InfoService/ChangeRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespHistory, error) {
	out := new(RespHistory)
	err := c.cc.Invoke(ctx, "/InfoService/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetCmd(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/InfoService/GetCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespStatus, error) {
	out := new(RespStatus)
	err := c.cc.Invoke(ctx, "/InfoService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetClients(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespClients, error) {
	out := new(RespClients)
	err := c.cc.Invoke(ctx, "/InfoService/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetTest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RespTest, error) {
	out := new(RespTest)
	err := c.cc.Invoke(ctx, "/InfoService/GetTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetDanmu(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InfoService_GetDanmuClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InfoService_serviceDesc.Streams[0], "/InfoService/GetDanmu", opts...)
	if err != nil {
		return nil, err
	}
	x := &infoServiceGetDanmuClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InfoService_GetDanmuClient interface {
	Recv() (*RespDanmu, error)
	grpc.ClientStream
}

type infoServiceGetDanmuClient struct {
	grpc.ClientStream
}

func (x *infoServiceGetDanmuClient) Recv() (*RespDanmu, error) {
	m := new(RespDanmu)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InfoServiceServer is the server API for InfoService service.
type InfoServiceServer interface {
	ChangeRoom(context.Context, *RoomId) (*Resp, error)
	GetHistory(context.Context, *empty.Empty) (*RespHistory, error)
	GetCmd(context.Context, *Cmd) (*Resp, error)
	GetStatus(context.Context, *empty.Empty) (*RespStatus, error)
	GetClients(context.Context, *empty.Empty) (*RespClients, error)
	GetTest(context.Context, *empty.Empty) (*RespTest, error)
	GetDanmu(*empty.Empty, InfoService_GetDanmuServer) error
}

// UnimplementedInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInfoServiceServer struct {
}

func (*UnimplementedInfoServiceServer) ChangeRoom(context.Context, *RoomId) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoom not implemented")
}
func (*UnimplementedInfoServiceServer) GetHistory(context.Context, *empty.Empty) (*RespHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (*UnimplementedInfoServiceServer) GetCmd(context.Context, *Cmd) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCmd not implemented")
}
func (*UnimplementedInfoServiceServer) GetStatus(context.Context, *empty.Empty) (*RespStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedInfoServiceServer) GetClients(context.Context, *empty.Empty) (*RespClients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (*UnimplementedInfoServiceServer) GetTest(context.Context, *empty.Empty) (*RespTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (*UnimplementedInfoServiceServer) GetDanmu(*empty.Empty, InfoService_GetDanmuServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDanmu not implemented")
}

func RegisterInfoServiceServer(s *grpc.Server, srv InfoServiceServer) {
	s.RegisterService(&_InfoService_serviceDesc, srv)
}

func _InfoService_ChangeRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).ChangeRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoService/ChangeRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).ChangeRoom(ctx, req.(*RoomId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoService/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetHistory(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoService/GetCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetCmd(ctx, req.(*Cmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoService/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetClients(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoService/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetTest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetDanmu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InfoServiceServer).GetDanmu(m, &infoServiceGetDanmuServer{stream})
}

type InfoService_GetDanmuServer interface {
	Send(*RespDanmu) error
	grpc.ServerStream
}

type infoServiceGetDanmuServer struct {
	grpc.ServerStream
}

func (x *infoServiceGetDanmuServer) Send(m *RespDanmu) error {
	return x.ServerStream.SendMsg(m)
}

var _InfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeRoom",
			Handler:    _InfoService_ChangeRoom_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _InfoService_GetHistory_Handler,
		},
		{
			MethodName: "GetCmd",
			Handler:    _InfoService_GetCmd_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _InfoService_GetStatus_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _InfoService_GetClients_Handler,
		},
		{
			MethodName: "GetTest",
			Handler:    _InfoService_GetTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDanmu",
			Handler:       _InfoService_GetDanmu_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "info.proto",
}
